/*
 * Created on 7 jun 2017 ( Time 11:29:14 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.servicosGerais.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.servicosGerais.bean.ServicoRoupas;
import org.servicosGerais.bean.jpa.ServicoRoupasEntity;
import org.servicosGerais.business.service.mapping.ServicoRoupasServiceMapper;
import org.servicosGerais.data.repository.jpa.ServicoRoupasJpaRepository;
import org.servicosGerais.test.MockValues;
import org.servicosGerais.test.ServicoRoupasEntityFactoryForTest;
import org.servicosGerais.test.ServicoRoupasFactoryForTest;

/**
 * Test : Implementation of ServicoRoupasService
 */
@RunWith(MockitoJUnitRunner.class)
public class ServicoRoupasServiceImplTest {

	@InjectMocks
	private ServicoRoupasServiceImpl servicoRoupasService;
	@Mock
	private ServicoRoupasJpaRepository servicoRoupasJpaRepository;
	@Mock
	private ServicoRoupasServiceMapper servicoRoupasServiceMapper;
	
	private ServicoRoupasFactoryForTest servicoRoupasFactoryForTest = new ServicoRoupasFactoryForTest();

	private ServicoRoupasEntityFactoryForTest servicoRoupasEntityFactoryForTest = new ServicoRoupasEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		ServicoRoupasEntity servicoRoupasEntity = servicoRoupasJpaRepository.findOne(id);
		
		ServicoRoupas servicoRoupas = servicoRoupasFactoryForTest.newServicoRoupas();
		when(servicoRoupasServiceMapper.mapServicoRoupasEntityToServicoRoupas(servicoRoupasEntity)).thenReturn(servicoRoupas);

		// When
		ServicoRoupas servicoRoupasFound = servicoRoupasService.findById(id);

		// Then
		assertEquals(servicoRoupas.getId(),servicoRoupasFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<ServicoRoupasEntity> servicoRoupasEntitys = new ArrayList<ServicoRoupasEntity>();
		ServicoRoupasEntity servicoRoupasEntity1 = servicoRoupasEntityFactoryForTest.newServicoRoupasEntity();
		servicoRoupasEntitys.add(servicoRoupasEntity1);
		ServicoRoupasEntity servicoRoupasEntity2 = servicoRoupasEntityFactoryForTest.newServicoRoupasEntity();
		servicoRoupasEntitys.add(servicoRoupasEntity2);
		when(servicoRoupasJpaRepository.findAll()).thenReturn(servicoRoupasEntitys);
		
		ServicoRoupas servicoRoupas1 = servicoRoupasFactoryForTest.newServicoRoupas();
		when(servicoRoupasServiceMapper.mapServicoRoupasEntityToServicoRoupas(servicoRoupasEntity1)).thenReturn(servicoRoupas1);
		ServicoRoupas servicoRoupas2 = servicoRoupasFactoryForTest.newServicoRoupas();
		when(servicoRoupasServiceMapper.mapServicoRoupasEntityToServicoRoupas(servicoRoupasEntity2)).thenReturn(servicoRoupas2);

		// When
		List<ServicoRoupas> servicoRoupassFounds = servicoRoupasService.findAll();

		// Then
		assertTrue(servicoRoupas1 == servicoRoupassFounds.get(0));
		assertTrue(servicoRoupas2 == servicoRoupassFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ServicoRoupas servicoRoupas = servicoRoupasFactoryForTest.newServicoRoupas();

		ServicoRoupasEntity servicoRoupasEntity = servicoRoupasEntityFactoryForTest.newServicoRoupasEntity();
		when(servicoRoupasJpaRepository.findOne(servicoRoupas.getId())).thenReturn(null);
		
		servicoRoupasEntity = new ServicoRoupasEntity();
		servicoRoupasServiceMapper.mapServicoRoupasToServicoRoupasEntity(servicoRoupas, servicoRoupasEntity);
		ServicoRoupasEntity servicoRoupasEntitySaved = servicoRoupasJpaRepository.save(servicoRoupasEntity);
		
		ServicoRoupas servicoRoupasSaved = servicoRoupasFactoryForTest.newServicoRoupas();
		when(servicoRoupasServiceMapper.mapServicoRoupasEntityToServicoRoupas(servicoRoupasEntitySaved)).thenReturn(servicoRoupasSaved);

		// When
		ServicoRoupas servicoRoupasResult = servicoRoupasService.create(servicoRoupas);

		// Then
		assertTrue(servicoRoupasResult == servicoRoupasSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ServicoRoupas servicoRoupas = servicoRoupasFactoryForTest.newServicoRoupas();

		ServicoRoupasEntity servicoRoupasEntity = servicoRoupasEntityFactoryForTest.newServicoRoupasEntity();
		when(servicoRoupasJpaRepository.findOne(servicoRoupas.getId())).thenReturn(servicoRoupasEntity);

		// When
		Exception exception = null;
		try {
			servicoRoupasService.create(servicoRoupas);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ServicoRoupas servicoRoupas = servicoRoupasFactoryForTest.newServicoRoupas();

		ServicoRoupasEntity servicoRoupasEntity = servicoRoupasEntityFactoryForTest.newServicoRoupasEntity();
		when(servicoRoupasJpaRepository.findOne(servicoRoupas.getId())).thenReturn(servicoRoupasEntity);
		
		ServicoRoupasEntity servicoRoupasEntitySaved = servicoRoupasEntityFactoryForTest.newServicoRoupasEntity();
		when(servicoRoupasJpaRepository.save(servicoRoupasEntity)).thenReturn(servicoRoupasEntitySaved);
		
		ServicoRoupas servicoRoupasSaved = servicoRoupasFactoryForTest.newServicoRoupas();
		when(servicoRoupasServiceMapper.mapServicoRoupasEntityToServicoRoupas(servicoRoupasEntitySaved)).thenReturn(servicoRoupasSaved);

		// When
		ServicoRoupas servicoRoupasResult = servicoRoupasService.update(servicoRoupas);

		// Then
		verify(servicoRoupasServiceMapper).mapServicoRoupasToServicoRoupasEntity(servicoRoupas, servicoRoupasEntity);
		assertTrue(servicoRoupasResult == servicoRoupasSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		servicoRoupasService.delete(id);

		// Then
		verify(servicoRoupasJpaRepository).delete(id);
		
	}

}
